using System.Linq;
using Content.Client._Moffstation.ReadyManifest.UI;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._Moffstation.ReadyManifest;


[GenerateTypedNameReferences]
public sealed partial class ReadyManifestUi : DefaultWindow
{
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    private readonly SpriteSystem _spriteSystem;

    public ReadyManifestUi()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entitySystem.GetEntitySystem<SpriteSystem>();
    }

    public void RebuildUI(Dictionary<ProtoId<JobPrototype>, int> jobCounts)
    {
        ReadyManifestListing.DisposeAllChildren();

        var departments = _prototypeManager.EnumeratePrototypes<DepartmentPrototype>()
            .Where(department => !department.EditorHidden)
            .Order(DepartmentUIComparer.Instance);
        foreach (var department in departments)
        {
            var category = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                HorizontalExpand = true,
                Name = department.ID
            };

            category.AddChild(new Label()
            {
                StyleClasses = { "LabelBig" },
                Text = Loc.GetString(department.Name)
            });

            ReadyManifestListing.AddChild(category);
            var jobs = department.Roles.Select(jobId => _prototypeManager.Index(jobId))
                .Where(job => job.SetPreference)
                .Order(JobUIComparer.Instance);

            foreach (var job in jobs)
            {
                var count = jobCounts.GetValueOrDefault(job.ID, 0);
                category.AddChild(new ReadyManifestEntry(job, count, _prototypeManager, _spriteSystem));
            }
        }
    }
}

